// Code generated by protoc-gen-go. DO NOT EDIT.
// source: verification.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VerificationResponse_VerificationResultCode int32

const (
	VerificationResponse_SUCCESS VerificationResponse_VerificationResultCode = 0
	VerificationResponse_FAIL    VerificationResponse_VerificationResultCode = 1
)

var VerificationResponse_VerificationResultCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}
var VerificationResponse_VerificationResultCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x VerificationResponse_VerificationResultCode) String() string {
	return proto1.EnumName(VerificationResponse_VerificationResultCode_name, int32(x))
}
func (VerificationResponse_VerificationResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{1, 0}
}

type VerificationRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *VerificationRequest) Reset()                    { *m = VerificationRequest{} }
func (m *VerificationRequest) String() string            { return proto1.CompactTextString(m) }
func (*VerificationRequest) ProtoMessage()               {}
func (*VerificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *VerificationRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type VerificationResponse struct {
	Result   VerificationResponse_VerificationResultCode `protobuf:"varint,1,opt,name=result,enum=proto.VerificationResponse_VerificationResultCode" json:"result,omitempty"`
	ClientId string                                      `protobuf:"bytes,2,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *VerificationResponse) Reset()                    { *m = VerificationResponse{} }
func (m *VerificationResponse) String() string            { return proto1.CompactTextString(m) }
func (*VerificationResponse) ProtoMessage()               {}
func (*VerificationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *VerificationResponse) GetResult() VerificationResponse_VerificationResultCode {
	if m != nil {
		return m.Result
	}
	return VerificationResponse_SUCCESS
}

func (m *VerificationResponse) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func init() {
	proto1.RegisterType((*VerificationRequest)(nil), "proto.VerificationRequest")
	proto1.RegisterType((*VerificationResponse)(nil), "proto.VerificationResponse")
	proto1.RegisterEnum("proto.VerificationResponse_VerificationResultCode", VerificationResponse_VerificationResultCode_name, VerificationResponse_VerificationResultCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Verification service

type VerificationClient interface {
	DoVerification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationResponse, error)
}

type verificationClient struct {
	cc *grpc.ClientConn
}

func NewVerificationClient(cc *grpc.ClientConn) VerificationClient {
	return &verificationClient{cc}
}

func (c *verificationClient) DoVerification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationResponse, error) {
	out := new(VerificationResponse)
	err := grpc.Invoke(ctx, "/proto.Verification/DoVerification", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Verification service

type VerificationServer interface {
	DoVerification(context.Context, *VerificationRequest) (*VerificationResponse, error)
}

func RegisterVerificationServer(s *grpc.Server, srv VerificationServer) {
	s.RegisterService(&_Verification_serviceDesc, srv)
}

func _Verification_DoVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServer).DoVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Verification/DoVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServer).DoVerification(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Verification_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Verification",
	HandlerType: (*VerificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoVerification",
			Handler:    _Verification_DoVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verification.proto",
}

func init() { proto1.RegisterFile("verification.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x4b, 0x2d, 0xca,
	0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x53, 0x4a, 0xda, 0x5c, 0xc2, 0x61, 0x48, 0x92, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x42, 0x22, 0x5c, 0xac, 0x25, 0xf9, 0xd9, 0xa9, 0x79, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x10, 0x8e, 0xd2, 0x06, 0x46, 0x2e, 0x11, 0x54, 0xd5, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42,
	0x5e, 0x5c, 0x6c, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x60, 0xf5, 0x7c, 0x46, 0x46, 0x10, 0x4b,
	0xf4, 0xb0, 0x29, 0x46, 0x17, 0x2c, 0xcd, 0x29, 0x71, 0xce, 0x4f, 0x49, 0x0d, 0x82, 0x9a, 0x20,
	0x24, 0xcd, 0xc5, 0x99, 0x9c, 0x93, 0x99, 0x9a, 0x57, 0x12, 0x9f, 0x99, 0x22, 0xc1, 0x04, 0xb6,
	0x9e, 0x03, 0x22, 0xe0, 0x99, 0xa2, 0xa4, 0xcf, 0x25, 0x86, 0x5d, 0xbb, 0x10, 0x37, 0x17, 0x7b,
	0x70, 0xa8, 0xb3, 0xb3, 0x6b, 0x70, 0xb0, 0x00, 0x83, 0x10, 0x07, 0x17, 0x8b, 0x9b, 0xa3, 0xa7,
	0x8f, 0x00, 0xa3, 0x51, 0x34, 0x17, 0x0f, 0xb2, 0x06, 0x21, 0x6f, 0x2e, 0x3e, 0x97, 0x7c, 0x14,
	0x11, 0x29, 0xac, 0x6e, 0x05, 0x07, 0x83, 0x94, 0x34, 0x1e, 0x7f, 0x28, 0x31, 0x24, 0xb1, 0x81,
	0x65, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xd8, 0xcb, 0x10, 0x60, 0x01, 0x00, 0x00,
}
